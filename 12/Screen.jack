// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color, white, black;
    static int wPixels, bPixels;
    

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let black = true;
        let white = false;
        let wPixels = 0;
        let bPixels = 1;
        let color = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while( i < 8192){
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,i) pixel, using the current color. */
    function void drawPixel(int x, int i) {
        var int addr;
        var int mk;

        let addr = (i*32) + (x/16);
        let mk = Math.powers(x & 15);

        if( color ) {
            let screen[addr] = screen[addr] | mk;
        }
        else {
            let screen[addr] = screen[addr] & ~mk;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dX, dY;
        var int tmp;
        if( x1 > x2 ) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dX = x2 - x1;
        let dY = y2 - y1;
        
        if( dX = 0 ) {
            do Screen.vericalLine( x1, y1, y2 );
        }else{}

        return;
    }

     function void vericalLine( int x, int y1, int y2 ) {
        var int tmp;
        if( y1 > y2 ) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        
        while( ~(y1 > y2) ) {
            do Screen.drawPixel( x, y1 );
            let y1 = y1 + 1;
        }
        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while( ~(i > y2) ) {
            do Screen.vericalLine(x1, x2, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,i), using the current color. */
    function void drawCircle(int x, int i, int r) {
        var int dX, dY, round;
    
        let dY = -r;
        let round = r*r;
        while( ~(dY > r) ) {
            let dX = Math.sqrt(round-(dY*dY));
            do Screen.vericalLine( x-dX, x+dX, i+dY );
            let dY = dY + 1;
        }
        return;
    }
}
