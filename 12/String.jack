// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buff;
    field int currLen, maxLength;
    field boolean isNeg;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength = 0) {
        let maxLength = 1;
      }

      let buff = Array.new(maxLength);
      let currLen = 0;
      let maxLength = maxLength;

      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Array.dispose(buff);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return currLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return buff[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j > maxLength) | (j = maxLength)) {
        return;
      }

      let buff[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let buff[currLen] = c;
      let currLen = currLen + 1;

      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (currLen = 0) {
        return;
      }

      let buff[currLen] = null;
      let currLen = currLen - 1;

      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int result;
      var int  i;
      var int valDigit;
      var boolean neg;

      let result = 0;
      let i = 0;

      if (buff[i] = 45) {
        let neg = true;
        let i = 1;
      }
      while (i < currLen) {
        let valDigit = buff[i] - 48; 
        let result = result * 10 + valDigit;
        let i = i + 1;
      }

      if (neg) {
        return -result;
      } else {
        return result;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int lDig, c;

      if (val < 0) {
        let val = -val;
        let isNeg = true;
      }

      let lDig = val - (val / 10 * 10);
      let c = 48 + lDig;

      if (val < 10) { 
        let currLen = 0;
        if (isNeg) {
          do appendChar(45); 
        }
        do appendChar(c);
      } else {
        do setInt(val / 10);
        do appendChar(c);
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
