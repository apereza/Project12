// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, heap, list, base, len, next;

    /** Initializes the class. */
    function void init() {
      let memory = 0;
      let len = 14335;
      let base = 2048;
      let next = 0;
      let heap = base;
      let list = heap;
      let heap[0] = next;
      let heap[1] = len;

      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let memory[address] = value;

      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int sbAddress, sNext, sLength, newAddress, newNext, lengths;

      let sbAddress = list;
      let sNext = memory[sbAddress];
      let sLength = memory[sbAddress + 1];

      while (sLength < (size + 2)) { 
        let sbAddress = sNext;
        let sNext = memory[sbAddress];
        let sLength = memory[sbAddress + 1];
      }

      let sLength = memory[sbAddress + 1] - size;
      let memory[sbAddress + 1] = sLength;
      let newAddress = sbAddress + 2 + sLength;
      let newNext = 0; 
      let memory[newAddress] = newNext; 
      let memory[newAddress + 1] = size;
      return newAddress + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var int newAddress, cAddress;

      let cAddress = list;
      let newAddress = memory[cAddress];

      while (~(newAddress = 0)) {
        let cAddress = newAddress;
        let newAddress = memory[cAddress];
      }

      let memory[newAddress] = o;

      return;
    }
}
