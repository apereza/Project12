// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array mArray;

    /** Initializes the library. */
    function void init() {
        let mArray = Array.new(16);
        let mArray[0] = 1;
        let mArray[1] = 2;
        let mArray[2] = 4;
        let mArray[3] = 8;
        let mArray[4] = 16;
        let mArray[5] = 32;
        let mArray[6] = 64;
        let mArray[7] = 128;
        let mArray[8] = 256;
        let mArray[9] = 512;
        let mArray[10] = 1024;
        let mArray[11] = 2048;
        let mArray[12] = 4096;
        let mArray[13] = 8192;
        let mArray[14] = 16384;
        let mArray[15] = 16384+16834;
        return;
    }

    function boolean bits(int x, int n){
        return ~((x & mArray[n]) = 0);
    }

    function int powers(int k){
        return mArray[k];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, sX, i;
        let sum = 0;
        let sX = x;
        let i = 0;

        while( i < 16){
            if(Math.bits(y,i)){
                let sum = sum + sX;
            }
            let sX = sX + sX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int nx, ny, i;
        var int res;
        
        let nx = x < 0;
        let ny = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if( y > x ) {
            return 0;
        }
        let i = Math.divide(x, y+y);
        if( x-(2*i*y) < y ) {
            let res = i+i;
        }
        else {
            let res = i+i+1;
        }
        
        if( nx = ny ) {
            return res;
        }
        else {
            return -res;
        }

    }

    function int mod(int x, int y){
        var int i;

        let i = Math.divide(x,y);
        return x - (i * y);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,appx,temp;

        let y = 0;
        let j = 7;

        while(~(j < 0)){
            let appx = y + mArray[j];
            let temp = appx * appx;
            if(~(temp > x) & (temp > 0)){
                let y = appx;
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }else{
            return b;
        }

    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }else{
            return b;
        }
    }
}
